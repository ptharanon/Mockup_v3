<div class="form-group constant" style="text-align:right">
    <p class="navbar-text navbar-text-custom">Value</p>
    <input type="text" class="form-control inputField" value="1">
</div>

<div class="form-group step" style="text-align:right">
    <p class="navbar-text navbar-text-custom">Step time</p>
    <input type="text" class="form-control inputField" value="1">

    <p class="navbar-text navbar-text-custom">Initial value</p>
    <input type="text" class="form-control inputField" value="0">

    <p class="navbar-text navbar-text-custom">Final value</p>
    <input type="text" class="form-control inputField" value="1">
</div>

<div class="form-group sine">
    <p class="navbar-text navbar-text-custom">Amplitude</p>
    <input type="text" class="form-control inputField" value="1">

    <p class="navbar-text navbar-text-custom">Bias</p>
    <input type="text" class="form-control inputField" value="0">

    <p class="navbar-text navbar-text-custom">Frequency</p>
    <input type="text" class="form-control inputField" value="1">

    <p class="navbar-text navbar-text-custom">Phase</p>
    <input type="text" class="form-control inputField" value="0">
</div>

<div class="form-group ramp">
    <p class="navbar-text navbar-text-custom">Slope</p>
    <input type="text" class="form-control inputField" value="1">

    <p class="navbar-text navbar-text-custom">Start time</p>
    <input type="text" class="form-control inputField" value="1">

    <p class="navbar-text navbar-text-custom">Initial value</p>
    <input type="text" class="form-control inputField" value="0">
</div>

@using (Html.BeginForm("Upload", "Simulation", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="form-group custom">
    <p id="filename" class="navbar-text navbar-text-custom">Upload</p>
    @*<input id="upload" type="file" style="display:none" accept="application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" onchange="openFile(event)" />*@
    <input type="file" name="file" id="upload" style="display:none" accept=".csv" onchange="openFile(event)" />
    <input type="submit" id="submit" style="display:none" />
    <ul class="nav navbar-nav" style="float:right; background-color:rgba(255,255,255,0)">
        <li><a onclick="clickUpload(event)" class="glyphicon glyphicon-upload"></a></li>
    </ul>
</div>
}

<script>
    function UploadFile(file, plotName)
    {
        $(document.getElementById(plotName)).find('#filename')[0].textContent = "Loading...";
        var data = new FormData();
        data.append("file", file);
        data.append("plotname", plotName);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", '@Url.Action("Upload", "Simulation")', true);
        xhr.addEventListener("load", function (event) { UploadComplete(event, plotName, file.name); }, false);
        xhr.addEventListener("error", function (event) { UploadFailed(event); }, false);
        xhr.send(data);
    }

    function UploadComplete(event, plotName, fileName) {
        if (event.target.status == 200) {
            drawPlot(plotName);
            $(document.getElementById(plotName)).find('#filename')[0].textContent = fileName;
        }
        else {
            $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
            alert("Error Uploading File");
        }
    }

    function UploadFailed(event) {
        $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
        alert("There was an error attempting to upload the file.");
    }
</script>

<script>
    function clickUpload(event) {
        $(event.path[3].children.upload).trigger('click');
    };

    var openFile = function (event) {
        event.preventDefault();
        if (event.path[0].files.length > 0) {
            var f = event.path[0].files[0];
            UploadFile(f, event.path[5].id);
        }
        //var f = event.path[0].files[0];
        //var reader = new FileReader();
        //var name = f.name;
        //var plotData = [];
        //reader.onload = function (e) {
        //    var data = e.target.result;
        //    var workbook = XLSX.read(data, { type: 'binary' });
        //    var i = 2;
        //    var cellA = "A" + i;
        //    var cellB = "B" + i;
        //    var Sheet = workbook.Sheets[workbook.SheetNames[0]];
        //    while (Sheet[cellA] !== undefined && Sheet[cellB] !== undefined) {
        //        plotData[i - 2] = [Sheet[cellA].v, Sheet[cellB].v];
        //        i++;
        //        var cellA = "A" + i;
        //        var cellB = "B" + i;
        //    }
        //};
        //reader.readAsBinaryString(f);
        //
        //reader.onloadend = function (e) {
        //    var id = event.path[4].id;
        //    if (id == "inputSpeed") {
        //        refSpeedPlot.series[0].data = plotData;
        //        refSpeedPlot.replot({ resetAxes: true });
        //    }
        //    if (id == "inputTorque") {
        //        loadTorquePlot.series[0].data = plotData;
        //        loadTorquePlot.replot({ resetAxes: true });
        //    }
        //}
    };
</script>