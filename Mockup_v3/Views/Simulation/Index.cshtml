
@{
    ViewBag.Title = "Simulation";
}

@using MotorLibrary.Helper.ExternalModel;
@model IEnumerable<MotorLibrary.Helper.ExternalModel.Models>


<section class="header" style="margin-bottom:40px"></section>
<!-- Input -->
<div class="inputs col-md-6" style="text-align:center">
    <h2 style="text-align:center">Input</h2><br />
    <div id="inputForm" style="text-align:center">
        @Html.Partial("MotorSelection")
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Reference Speed" }, { "id", "inputSpeed" }, { "plotid", "refSpeedGraph" } })
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Load Torque" }, { "id", "inputTorque" }, { "plotid", "loadTorqueGraph" } })
        <!-- Simulate button -->
        <div style="margin:20px">
            <button id="simulate-btn" type="submit" class="btn btn-primary btn-lg">SIMULATE!</button>
        </div>
        <hr />
    </div>
</div>
<!-- Output -->
<div class="outputs col-md-6" style="text-align:center">
    <h2 style="text-align:center">Output</h2><br />
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Speed" }, { "id", "outputSpeed" }, { "plotid", "outputSpeedGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Torque" }, { "id", "outputTorque" }, { "plotid", "outputTorqueGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Stator Current" }, { "id", "outputCurrent" }, { "plotid", "outputSCGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "DC Bus Voltage" }, { "id", "outputVoltage" }, { "plotid", "outputDCVGraph" } })
    <!-- Export button -->
    <div style="margin:20px">
        <input type="button" class="btn btn-primary btn-lg" value="EXPORT TO CSV" onclick="location.href='@Url.Action("ExportDataToCsv", "Simulation")'" />
    </div>
</div>

<script>
    var layout = {
        xaxis: {
            title: 'Time',
            showticklabels: true
        },
        yaxis: {
            showticklabels: true
        },
        margin: {
            autosize: true,
            t: 0,
            b: 40,
            l: 30,
            r: 10
        },
        hovermode: 'closest',
        showlegend: false
    };
    Plotly.plot('refSpeedGraph', [{ x: [], y: [] }], layout, { showLink: false });
    Plotly.plot('loadTorqueGraph', [{ x: [], y: [] }], layout, { showLink: false });
    Plotly.plot('outputSCGraph', [{ x: [], y: [] }], layout, { showLink: false });
    Plotly.plot('outputTorqueGraph', [{ x: [], y: [] }], layout, { showLink: false });
    Plotly.plot('outputSpeedGraph', [{ x: [], y: [] }], layout, { showLink: false });
    Plotly.plot('outputDCVGraph', [{ x: [], y: [] }], layout, { showLink: false });
</script>

<script>
    $(document).ready(function () {
        $('#simulate-btn').click(function (e) {
            e.preventDefault();
            document.getElementById('simulate-btn').textContent = "Loading...";
            var motor = document.getElementById('motor-name').text;
            $.ajax({
                url: '@Url.Action("Simulate", "Simulation")',
                data: { motor: motor },
                type: "post",
                dataType: 'json',
                success: function (response) {
                    drawPlot("outputCurrent");
                    drawPlot("outputTorque");
                    drawPlot("outputSpeed");
                    drawPlot("outputVoltage");
                    document.getElementById('simulate-btn').textContent = "SIMULATE!";
                },
                error: function () {
                    document.getElementById('simulate-btn').textContent = "SIMULATE!";
                    alert('Error with simulation.');
                }
            })
        });
    });

    $('#exportcsv-btn').click(function (e) {
        e.preventDefault();
    });

    function drawPlot(plotName) {
        var endtime = 2;
        $.ajax({
            url: '@Url.Action("GetPlotData", "Simulation")',
            data: { plotname: plotName },
            type: "get",
            success: function (response) {
                endtime = response.signal[0][response.signal[0].length-1];
                if (plotName == "inputSpeed") {
                    Plotly.deleteTraces(refSpeedGraph, 0);
                    Plotly.addTraces(refSpeedGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "inputTorque") {
                    Plotly.deleteTraces(loadTorqueGraph, 0);
                    Plotly.addTraces(loadTorqueGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputCurrent") {
                    Plotly.deleteTraces(outputSCGraph, 0);
                    Plotly.addTraces(outputSCGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputTorque") {
                    while (outputTorqueGraph.data.length > 0) {
                        Plotly.deleteTraces(outputTorqueGraph, 0);
                    }
                    Plotly.addTraces(outputTorqueGraph, { x: response.signal[0], y: response.signal[1] });
                    Plotly.addTraces(outputTorqueGraph, { x: response.refsignal[0], y: response.refsignal[1] });
                } else if (plotName == "outputSpeed") {
                    while (outputSpeedGraph.data.length > 0) {
                        Plotly.deleteTraces(outputSpeedGraph, 0);
                    }
                    Plotly.addTraces(outputSpeedGraph, { x: response.signal[0], y: response.signal[1] });
                    Plotly.addTraces(outputSpeedGraph, { x: response.refsignal[0], y: response.refsignal[1] });
                } else if (plotName == "outputVoltage") {
                    Plotly.deleteTraces(outputDCVGraph, 0);
                    Plotly.addTraces(outputDCVGraph, { x: response.signal[0], y: response.signal[1] });
                }
            }
        })
        return endtime;
    }
</script>

<script type="text/javascript">
    $(window).resize(function () {
        Plotly.Plots.resize(refSpeedGraph);
        Plotly.Plots.resize(loadTorqueGraph);
        Plotly.Plots.resize(outputSCGraph);
        Plotly.Plots.resize(outputTorqueGraph);
        Plotly.Plots.resize(outputSpeedGraph);
        Plotly.Plots.resize(outputDCVGraph);
    });
</script>

<script type="text/javascript">
    $(".dropdown-menu li a").click(function () {
        $(this).parents(".dropdown").find('.dropdown-toggle').html($(this).text() + '<span class="caret"></span>');
        $(this).parents(".dropdown").find('.dropdown-toggle').val($(this).data('value'));
        if ($(this).text() == "Constant") {
            $(this).parents(".panel").find('.const').show();
            $(this).parents(".panel").find('.step').hide();
            $(this).parents(".panel").find('.ramp').hide();
            $(this).parents(".panel").find('.sine').hide();
            $(this).parents(".panel").find('.custom').hide();
        }
        else if ($(this).text() == "Step") {
            $(this).parents(".panel").find('.const').hide();
            $(this).parents(".panel").find('.step').show();
            $(this).parents(".panel").find('.ramp').hide();
            $(this).parents(".panel").find('.sine').hide();
            $(this).parents(".panel").find('.custom').hide();
        }
        else if ($(this).text() == "Ramp") {
            $(this).parents(".panel").find('.const').hide();
            $(this).parents(".panel").find('.step').hide();
            $(this).parents(".panel").find('.ramp').show();
            $(this).parents(".panel").find('.sine').hide();
            $(this).parents(".panel").find('.custom').hide();
        }
        else if ($(this).text() == "Sinusoid") {
            $(this).parents(".panel").find('.const').hide();
            $(this).parents(".panel").find('.step').hide();
            $(this).parents(".panel").find('.ramp').hide();
            $(this).parents(".panel").find('.sine').show();
            $(this).parents(".panel").find('.custom').hide();
        }
        else if ($(this).text() == "Custom") {
            $(this).parents(".panel").find('.const').hide();
            $(this).parents(".panel").find('.step').hide();
            $(this).parents(".panel").find('.sine').hide();
            $(this).parents(".panel").find('.ramp').hide();
            $(this).parents(".panel").find('.custom').show();
            $(this).parents(".panel").find('#filename')[0].textContent = "Upload";
        }

        updatePlotData($(this).text(), $(this).parents(".panel")[0].id);
    });

    $(".inputField").change(function (event) {
        updatePlotData($(this).parents(".panel").find(".dropdown-toggle")[0].text, $(this).parents(".panel")[0].id);
    });

    $("#endtime").change(function (event) {
        updatePlotData(document.getElementById("inputSpeed").children[0].children[1].children[0].children[0].text, "inputSpeed");
        updatePlotData(document.getElementById("inputTorque").children[0].children[1].children[0].children[0].text, "inputTorque");
    });

    function updatePlotData(plotType, plotName) {
        var endtime = document.getElementById('endtime').value;
        if (plotType == "Constant") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[0];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = 0;
            var param3 = 0;
            var param4 = 0;
        } else if (plotType == "Step") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[1];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = 0;
        } else if (plotType == "Sinusoid") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[2];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = parseFloat(inputFields.children[7].value);
        } else if (plotType == "Ramp") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[3];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = 0;
        }
        if (plotType != "Custom") {
            $.ajax({
                url: '@Url.Action("UpdateGraph", "Simulation")',
                data: {
                    plot: plotName,
                    type: plotType,
                    param1: param1,
                    param2: param2,
                    param3: param3,
                    param4: param4,
                    endtime: endtime
                },
                type: "post",
                dataType: 'json',
                success: function (response) {
                    drawPlot(plotName);
                }
            });
        }
    };
</script>

<script>
    function UploadFile(file, plotName)
    {
        $(document.getElementById(plotName)).find('#filename')[0].textContent = "Loading...";
        var data = new FormData();
        data.append("file", file);
        data.append("plotname", plotName);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", '@Url.Action("Upload", "Simulation")', true);
        xhr.addEventListener("load", function (event) { UploadComplete(event, plotName, file.name); }, false);
        xhr.addEventListener("error", function (event) { UploadFailed(event); }, false);
        xhr.send(data);
    }

    function UploadComplete(event, plotName, fileName) {
        if (event.target.status == 200) {
            var endtime = drawPlot(plotName);
            document.getElementById('endtime').value = endtime;
            $(document.getElementById(plotName)).find('#filename')[0].textContent = fileName;
        }
        else {
            $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
            alert("Error Uploading File");
        }
    }

    function UploadFailed(event) {
        $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
        alert("There was an error attempting to upload the file.");
    }
</script>

<script>
    function clickUpload(event) {
        $(event.path[3].children.upload).trigger('click');
    };

    var openFile = function (event) {
        event.preventDefault();
        if (event.path[0].files.length > 0) {
            var f = event.path[0].files[0];
            UploadFile(f, event.path[5].id);
        }
        //var f = event.path[0].files[0];
        //var reader = new FileReader();
        //var name = f.name;
        //var plotData = [];
        //reader.onload = function (e) {
        //    var data = e.target.result;
        //    var workbook = XLSX.read(data, { type: 'binary' });
        //    var i = 2;
        //    var cellA = "A" + i;
        //    var cellB = "B" + i;
        //    var Sheet = workbook.Sheets[workbook.SheetNames[0]];
        //    while (Sheet[cellA] !== undefined && Sheet[cellB] !== undefined) {
        //        plotData[i - 2] = [Sheet[cellA].v, Sheet[cellB].v];
        //        i++;
        //        var cellA = "A" + i;
        //        var cellB = "B" + i;
        //    }
        //};
        //reader.readAsBinaryString(f);
        //
        //reader.onloadend = function (e) {
        //    var id = event.path[4].id;
        //    if (id == "inputSpeed") {
        //        refSpeedPlot.series[0].data = plotData;
        //        refSpeedPlot.replot({ resetAxes: true });
        //    }
        //    if (id == "inputTorque") {
        //        loadTorquePlot.series[0].data = plotData;
        //        loadTorquePlot.replot({ resetAxes: true });
        //    }
        //}
    };
</script>