
@{
    ViewBag.Title = "Simulation";
}

@using MotorLibrary.Helper.ExternalModel;
@model IEnumerable<MotorLibrary.Helper.ExternalModel.Models>


<section class="header" style="margin-bottom:40px"></section>
<!-- Input -->
<div class="inputs col-md-6" style="text-align:center">
    <h2 style="text-align:center">Input</h2><br />
    <div id="inputForm" style="text-align:center">
        @Html.Partial("MotorSelection")
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Reference Speed" }, { "id", "inputSpeed" }, { "plotid", "refSpeedGraph" } });
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Load Torque" }, { "id", "inputTorque" }, { "plotid", "loadTorqueGraph" } })
        <!-- Simulate button -->
        <div style="margin:20px">
            <button id="simulate-btn" type="submit" class="btn btn-primary btn-lg">SIMULATE!</button>
        </div>
        <hr />
    </div>
</div>
<!-- Output -->
<div class="outputs col-md-6" style="text-align:center">
    @Html.Partial("Output")
    <!-- Export button -->
    <div style="margin:20px">
        <input type="button" class="btn btn-primary btn-lg" value="EXPORT TO CSV" onclick="location.href='@Url.Action("ExportDataToCsv", "Simulation")'" />
    </div>
</div>

<script>
    var layout = {
        xaxis: {
            title: 'Time',
            showticklabels: true
        },
        yaxis: {
            showticklabels: true
        },
        margin: {
            autosize: true,
            t: 0,
            b: 40,
            l: 40,
            r: 0
        },
        hovermode: 'closest'
    };
    Plotly.plot('refSpeedGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    Plotly.plot('loadTorqueGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    Plotly.plot('outputSCGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    Plotly.plot('outputTorqueGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    Plotly.plot('outputSpeedGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    Plotly.plot('outputDCVGraph', [{ x: [0], y: [0] }], layout, { showLink: false });
    //var plotDiv = document.getElementById('refSpeedGraph');
    //var plotData = plotDiv.data;
</script>

<script>
    $(document).ready(function () {
        $('#simulate-btn').click(function (e) {
            e.preventDefault();
            document.getElementById('simulate-btn').textContent = "Loading...";
            $.ajax({
                url: '@Url.Action("Simulate", "Simulation")',
                data: { motor: "Motor 1" },
                type: "post",
                dataType: 'json',
                success: function (response) {
                    drawPlot("outputCurrent");
                    drawPlot("outputTorque");
                    drawPlot("outputSpeed");
                    drawPlot("outputVoltage");
                    document.getElementById('simulate-btn').textContent = "SIMULATE!";
                }
            })
        });
    });

    $('#exportcsv-btn').click(function (e) {
        e.preventDefault();
    });

    function drawPlot(plotName) {
        $.ajax({
            url: '@Url.Action("GetPlotData", "Simulation")',
            data: { plotname: plotName },
            type: "get",
            success: function (response) {
                if (plotName == "inputSpeed") {
                    Plotly.deleteTraces(refSpeedGraph, 0);
                    Plotly.addTraces(refSpeedGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "inputTorque") {
                    Plotly.deleteTraces(loadTorqueGraph, 0);
                    Plotly.addTraces(loadTorqueGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputCurrent") {
                    Plotly.deleteTraces(outputSCGraph, 0);
                    Plotly.addTraces(outputSCGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputTorque") {
                    Plotly.deleteTraces(outputTorqueGraph, 0);
                    Plotly.addTraces(outputTorqueGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputSpeed") {
                    Plotly.deleteTraces(outputSpeedGraph, 0);
                    Plotly.addTraces(outputSpeedGraph, { x: response.signal[0], y: response.signal[1] });
                } else if (plotName == "outputVoltage") {
                    Plotly.deleteTraces(outputDCVGraph, 0);
                    Plotly.addTraces(outputDCVGraph, { x: response.signal[0], y: response.signal[1] });
                }
            }
        })
    }
</script>

<script type="text/javascript">
    $(window).resize(function () {
        Plotly.Plots.resize(refSpeedGraph);
        Plotly.Plots.resize(loadTorqueGraph);
        Plotly.Plots.resize(outputSCGraph);
        Plotly.Plots.resize(outputTorqueGraph);
        Plotly.Plots.resize(outputSpeedGraph);
        Plotly.Plots.resize(outputDCVGraph);
    });
</script>