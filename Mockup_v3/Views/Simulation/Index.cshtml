
@{
    ViewBag.Title = "Simulation";
}

@using MotorLibrary.Helper.ExternalModel;
@model IEnumerable<MotorLibrary.Helper.ExternalModel.Models>


<section class="header" style="margin-bottom:40px"></section>
<!-- Input -->
<div class="inputs col-md-6" style="text-align:center">
    <h2 style="text-align:center">Input</h2><br />
    <div id="inputForm" style="text-align:center">
        @Html.Partial("MotorSelection")
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Reference Speed" }, { "id", "inputSpeed" }, { "plotid", "inputSpeedGraph" } })
        @Html.Partial("Input", new ViewDataDictionary { { "title", "Load Torque" }, { "id", "inputTorque" }, { "plotid", "inputTorqueGraph" } })
        @Html.Partial("SignalSettings")
        <!-- Simulate button -->
        <div style="margin:20px">
            <button id="simulate-btn" type="submit" class="btn btn-primary btn-lg">SIMULATE!</button>
        </div>
        <hr />
    </div>
</div>
<!-- Output -->
<div class="outputs col-md-6" style="text-align:center">
    <h2 style="text-align:center">Output</h2><br />
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Speed" }, { "id", "outputSpeed" }, { "plotid", "outputSpeedGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Torque" }, { "id", "outputTorque" }, { "plotid", "outputTorqueGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "Stator Current" }, { "id", "outputCurrent" }, { "plotid", "outputCurrentGraph" } })
    @Html.Partial("Output", new ViewDataDictionary { { "title", "DC Bus Voltage" }, { "id", "outputVoltage" }, { "plotid", "outputVoltageGraph" } })
    <!-- Export button -->
    <div style="margin:20px">
        <input type="button" class="btn btn-primary btn-lg" value="EXPORT TO CSV" onclick="location.href='@Url.Action("ExportDataToCsv", "Simulation")'" />
    </div>
</div>

<script src="~/Scripts/simulation.js"></script>

<script>
    // Pass file to controller.
    function UploadFile(file, plotName) {

        // Give feedback while loading.
        $(document.getElementById(plotName)).find('#filename')[0].textContent = "Loading...";

        // Use an XMLHttpRequest to pass the file to the controller.
        var data = new FormData();
        data.append("file", file);
        data.append("plotname", plotName);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", '@Url.Action("Upload", "Simulation")', true);
        // Add listeners.
        xhr.addEventListener("load",
            // Success function.
            function (event) {
                if (event.target.status == 200) {
                    drawPlot(plotName);
                    $(document.getElementById(plotName)).find('#filename')[0].textContent = file.name;
                }
                else {
                    $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
                    alert("An error occurred when uploading or processing file.");
                }
            }, false
        );
        xhr.addEventListener("error",
            // Error function.
            function (event) {
                $(document.getElementById(plotName)).find('#filename')[0].textContent = "Upload";
                alert("There was an error attempting to upload the file.");
            }, false
        );
        
        // Send the file.
        xhr.send(data);
    }
</script>

<script>
    // Call Simulate inside the SimulationController.
    $('#simulate-btn').click(function (e) {
        e.preventDefault();

        // Give feedback.
        document.getElementById('simulate-btn').textContent = "Loading...";

        // We only need to send motor name, as the plot data is in the model, in higher resolution than the graphs.
        var motor = document.getElementById('motor-name').text;
        $.ajax({
            url: '@Url.Action("Simulate", "Simulation")',
            data: { motor: motor },
            type: "post",
            dataType: 'json',
            success: function (response) {
                // If ZOH was used.
                if (response.zoh == true) {
                    alert('Note: Zero order hold used to match longer input.');
                }
                // If sample times didn't match.
                if (response.sm == false) {
                    alert('Error: Sample times don\'t match');
                } else {
                    drawPlot("outputCurrent");
                    drawPlot("outputTorque");
                    drawPlot("outputSpeed");
                    drawPlot("outputVoltage");
                }
                document.getElementById('simulate-btn').textContent = "SIMULATE!";
            },
            error: function () {
                document.getElementById('simulate-btn').textContent = "SIMULATE!";
                alert('An error occurred during simulation.');
            }
        })
    });

    // Get the graph data from the model, and plot it.
    function drawPlot(plotName) {
        $.ajax({
            url: '@Url.Action("GetPlotData", "Simulation")',
            data: { plotname: plotName },
            type: "get",
            success: function (response) {
                if (plotName == "inputSpeed") {
                    while (inputSpeedGraph.data.length > 0) {
                        Plotly.deleteTraces(inputSpeedGraph, 0);
                    }
                    Plotly.addTraces(inputSpeedGraph, [{ x: response.signal[0], y: response.signal[1], name: "Input Speed" }]);
                } else if (plotName == "inputTorque") {
                    while (inputTorqueGraph.data.length > 0) {
                        Plotly.deleteTraces(inputTorqueGraph, 0);
                    }
                    Plotly.addTraces(inputTorqueGraph, [{ x: response.signal[0], y: response.signal[1], name: "Load Torque" }]);
                } else if (plotName == "outputSpeed") {
                    while (outputSpeedGraph.data.length > 0) {
                        Plotly.deleteTraces(outputSpeedGraph, 0);
                    }
                    Plotly.addTraces(outputSpeedGraph, [{ x: response.signal[0], y: response.signal[1], name: "Output Speed" }]);
                    Plotly.addTraces(outputSpeedGraph, { x: response.refsignal[0], y: response.refsignal[1], name: "Reference Speed" });
                } else if (plotName == "outputTorque") {
                    while (outputTorqueGraph.data.length > 0) {
                        Plotly.deleteTraces(outputTorqueGraph, 0);
                    }
                    Plotly.addTraces(outputTorqueGraph, [{ x: response.signal[0], y: response.signal[1], name: "Output Torque" }]);
                    Plotly.addTraces(outputTorqueGraph, { x: response.refsignal[0], y: response.refsignal[1], name: "Reference Torque" });
                } else if (plotName == "outputCurrent") {
                    while (outputCurrentGraph.data.length > 0) {
                        Plotly.deleteTraces(outputCurrentGraph, 0);
                    }
                    Plotly.addTraces(outputCurrentGraph, [{ x: response.signal[0], y: response.signal[1], name: "Output Current" }]);
                } else if (plotName == "outputVoltage") {
                    while (outputVoltageGraph.data.length > 0) {
                        Plotly.deleteTraces(outputVoltageGraph, 0);
                    }
                    Plotly.addTraces(outputVoltageGraph, [{ x: response.signal[0], y: response.signal[1], name: "Output Voltage" }]);
                }
            }
        })
    }

    // When an input field has changed, send the parameters to the controller to generate another signal.
    function updatePlotData(plotType, plotName) {
        var sampletime = document.getElementById('sampletime').value;
        var endtime = document.getElementById('endtime').value;
        if (plotType == "Constant") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[0];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = 0;
            var param3 = 0;
            var param4 = 0;
        } else if (plotType == "Step") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[1];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = 0;
        } else if (plotType == "Sinusoid") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[2];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = parseFloat(inputFields.children[7].value);
        } else if (plotType == "Ramp") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[3];
            var param1 = parseFloat(inputFields.children[1].value);
            var param2 = parseFloat(inputFields.children[3].value);
            var param3 = parseFloat(inputFields.children[5].value);
            var param4 = 0;
        }
        if (plotType != "Custom") {
            $.ajax({
                url: '@Url.Action("UpdateGraph", "Simulation")',
                data: {
                    plot: plotName,
                    type: plotType,
                    param1: param1,
                    param2: param2,
                    param3: param3,
                    param4: param4,
                    endtime: endtime,
                    sample: sampletime
                },
                type: "post",
                dataType: 'json',
                success: function (response) {
                    drawPlot(plotName);
                }
            });
        }
    };
</script>