
@{
    ViewBag.Title = "Simulation";
}

<section class="header" style="margin-bottom:40px"></section>

<!-- Input -->
<div class="inputs col-md-6">
    <h2 style="text-align:center">Input</h2><br />
    <form id="inputForm" style="text-align:center">
        <!-- Motor selection -->
        <div class="panel panel-default">
            <div class="panel-heading nav navbar-default" style="padding:0px">
                <div class="navbar-header">
                    <div class="navbar-brand" style="padding:15px; height:50px">Motor Library</div>
                </div>
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Select Motor<span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a>Motor 1</a></li>
                            <li><a>Motor 2</a></li>
                            <li><a>Motor 3</a></li>
                            <li><a>Motor 4</a></li>
                            <li><a>Motor 5</a></li>
                        </ul>
                    </li>
                </ul>
                <ul class="nav navbar-nav" style="float:right">
                    <li><a href="#motorsettings" data-toggle="collapse" class="glyphicon glyphicon-cog"></a></li>
                </ul>
            </div>
            <div class="panel-body collapse" id="motorsettings" style="padding:0px 10px 10px 10px">
                <div class="motorLibrary">
                    <div class="col-md-9" style="padding-left:0px">
                        <fieldset class="motorParams" style="padding-bottom:10px">
                            <legend>Equivalent circuit parameters</legend>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Resistance (ohm)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">D-axis inductance (H)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Q-axis inductance (H)</label>
                                <input class="input-custom" type="number" />
                            </div>
                        </fieldset>
                    </div>
                    <fieldset class="col-md-3">
                        <legend>Flux constant</legend>
                        <div class="motorParam">
                            <label class="label-custom">Specify</label>
                            <input class="input-custom" type="number" />
                        </div>
                    </fieldset>
                    <div class="col-md-9" style="padding-left:0px">
                        <fieldset class="motorParams" style="padding-bottom:10px">
                            <legend>Mechanical parameters</legend>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Inertia (kg*m^2)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Friction (N-m-s)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Pole pairs (Motors)</label>
                                <input class="input-custom" type="number" />
                            </div>
                        </fieldset>
                        <fieldset>
                            <legend>Initial values</legend>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Speed (rad/s)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Angle (deg)</label>
                                <input class="input-custom" type="number" />
                            </div>
                            <div class="motorParam col-md-4">
                                <label class="label-custom">Kp</label>
                                <input class="input-custom" type="number" />
                            </div>
                        </fieldset>
                    </div>
                    <fieldset class="col-md-3" style="padding-bottom:14px">
                        <legend>Initial currents</legend>
                        <div class="motorParam col-md-12">
                            <label class="label-custom">Phase A (A)</label>
                            <input class="input-custom" type="number" />
                        </div>
                        <div class="motorParam col-md-12">
                            <label class="label-custom">Phase B (A)</label>
                            <input class="input-custom" type="number" />
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
        <!-- Input speed -->
        <div id="inputSpeed" class="panel panel-default">
            <div class="panel-heading nav navbar-default" style="padding:0px">
                <div class="navbar-header">
                    <text class="navbar-brand" style="padding:15px">Reference Speed</text>
                </div>
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="#" class="testest dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            Select Waveform<span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a>Step</a></li>
                            <li><a>Ramp</a></li>
                            <li><a>Sinusoid</a></li>
                            <li><a>Custom</a></li>
                        </ul>
                    </li>
                </ul>
                <div class="row input-group" style="float:right; margin-right:0px">
                    @Html.Partial("InputFields")
                </div>
            </div>
            <div class="panel-body" id="graph-speed">
                <div id="refSpeedGraph" style="height:250px"></div>
            </div>
        </div>
        <!-- Load torque -->
        <div id="inputTorque" class="panel panel-default">
            <div class="panel-heading nav navbar-default" style="padding:0px">
                <div class="navbar-header">
                    <text class="navbar-brand" style="padding:15px">Load Torque</text>
                </div>
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Select Waveform<span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a>Step</a></li>
                            <li><a>Ramp</a></li>
                            <li><a>Sinusoid</a></li>
                            <li><a>Custom</a></li>
                        </ul>
                    </li>
                </ul>
                <div class="input-group pull-right">
                    @Html.Partial("InputFields")
                </div>
            </div>
            <div class="panel-body">
                <div id="loadTorqueGraph" style="height:250px"></div>
            </div>
        </div>
        <!-- Simulate button -->
        <div style="margin:20px">
            <button type="submit" class="btn btn-primary btn-lg">SIMULATE!</button>
        </div>
    </form>
</div>
<!-- Output -->
<div class="outputs col-md-6" style="text-align: center">
    @Html.Partial("SimulationOutput")
</div>

<script type="text/javascript">
    var refSpeedPlot;
    var loadTorquePlot;

    $(window).load(function () {
        var graph = [[0, 0]];
        refSpeedPlot = jQuery.jqplot('refSpeedGraph', [graph], {
            seriesDefaults: {
                showMarker: false,
                pointLabels: { show: false, edgeTolerance: 5 }
            },
            axes: {
                xaxis: { label: "sec", labelRenderer: $.jqplot.CanvasAxisLabelRenderer },
                yaxis: { label: "rad/s", labelRenderer: $.jqplot.CanvasAxisLabelRenderer }
            },
            cursor: {
                show: true
            }
        });

        loadTorquePlot = jQuery.jqplot('loadTorqueGraph', [graph], {
            seriesDefaults: {
                showMarker: false,
                pointLabels: { show: false, edgeTolerance: 5 }
            },
            axes: {
                xaxis: { label: "sec", labelRenderer: $.jqplot.CanvasAxisLabelRenderer },
                yaxis: { label: "Nm", labelRenderer: $.jqplot.CanvasAxisLabelRenderer }
            },
            cursor: {
                show: true
            }
        });
    });

    $(window).resize(function () {
        refSpeedPlot.replot();
        loadTorquePlot.replot();
    });
</script>

<script type="text/javascript">
    $(".dropdown-menu li a").click(function () {
        $(this).parents(".dropdown").find('.dropdown-toggle').html($(this).text() + '<span class="caret"></span>');
        $(this).parents(".dropdown").find('.dropdown-toggle').val($(this).data('value'));
        if ($(this).text() == "Sinusoid") {
            $(this).parents(".panel-heading").find('.step').hide();
            $(this).parents(".panel-heading").find('.ramp').hide();
            $(this).parents(".panel-heading").find('.sine').show();
            $(this).parents(".panel-heading").find('.custom').hide();
        }
        else if ($(this).text() == "Step") {
            $(this).parents(".panel-heading").find('.sine').hide();
            $(this).parents(".panel-heading").find('.ramp').hide();
            $(this).parents(".panel-heading").find('.step').show();
            $(this).parents(".panel-heading").find('.custom').hide();
        }
        else if ($(this).text() == "Ramp") {
            $(this).parents(".panel-heading").find('.step').hide();
            $(this).parents(".panel-heading").find('.sine').hide();
            $(this).parents(".panel-heading").find('.ramp').show();
            $(this).parents(".panel-heading").find('.custom').hide();
        }
        else if ($(this).text() == "Custom") {
            $(this).parents(".panel-heading").find('.step').hide();
            $(this).parents(".panel-heading").find('.sine').hide();
            $(this).parents(".panel-heading").find('.ramp').hide();
            $(this).parents(".panel-heading").find('.custom').show();
        }
        updatePlot($(this).text(), $(this).parents(".panel")[0].id);
    });

    $(".inputField").change(function (event) {
        updatePlot($(this).parents(".nav").find(".dropdown-toggle")[0].text, $(this).parents(".panel")[0].id)
    });

    function updatePlot(plotType, plotName) {
        var plotData = [];
        var i;
        var sample = 0.02;
        if (plotType == "Step") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[0];
            var stepTime = parseFloat(inputFields.children[1].value);
            var initialValue = parseFloat(inputFields.children[3].value);
            var finalValue = parseFloat(inputFields.children[5].value);
            for (i = 0 / sample; i < 10 / sample; i++) {
                if (i * sample < stepTime) {
                    plotData[i] = [i * sample, initialValue];
                } else {
                    plotData[i] = [i * sample, finalValue];
                }
            }
        } else if (plotType == "Ramp") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[2];
            var slope = parseFloat(inputFields.children[1].value);
            var startTime = parseFloat(inputFields.children[3].value);
            var initialValue = parseFloat(inputFields.children[5].value);
            for (i = 0 / sample; i < 10 / sample; i++) {
                if (i * sample < startTime) {
                    plotData[i] = [i * sample, initialValue];
                } else {
                    plotData[i] = [i * sample, (i * sample - startTime) * slope + initialValue];
                }
            }
        } else if (plotType == "Sinusoid") {
            var inputFields = document.getElementById(plotName).children[0].children[2].children[1];
            var amp = parseFloat(inputFields.children[1].value);
            var bias = parseFloat(inputFields.children[3].value);
            var freq = parseFloat(inputFields.children[5].value);
            var phase = parseFloat(inputFields.children[7].value);
            for (i = 0 / sample; i < 10 / sample; i++) {
                plotData[i] = [i * sample, amp * Math.sin(freq * i * sample + phase) + bias];
            }
        }
        if (plotName == "inputSpeed") {
            refSpeedPlot.series[0].data = plotData;
            refSpeedPlot.replot({ resetAxes: true });
        } else if (plotName == "inputTorque") {
            loadTorquePlot.series[0].data = plotData;
            loadTorquePlot.replot({ resetAxes: true });
        }
    };
</script>

<script>
    $(document).ready(function () {
        $('#inputForm').submit(function (e) {
            e.preventDefault();
            $.ajax({
                url: '@Url.Action("Simulate", "Simulation")',
                data: {
                    motor: "Motor 1",
                    inputSpeed: JSON.stringify(refSpeedPlot.series[0].data),
                    inputTorque: JSON.stringify(loadTorquePlot.series[0].data),
                    size: refSpeedPlot.series[0].data.length
                },
                type: "post",
                dataType: 'json',
                success: function (response) {
                    console.log(response.motor);
                    console.log(response.inputSpeed);
                    console.log(response.inputTorque);
                    console.log(response.size);
                }
            })
        });
    });
</script>